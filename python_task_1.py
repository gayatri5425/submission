# -*- coding: utf-8 -*-
"""python_task_1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13r_iqY1IlNfC3Ew1XmgRPb1935E9Fu4L
"""

import pandas as pd

path="/content/dataset-1.csv"
df = pd.read_csv(path)
df

df.isnull().sum()

df.head(5)

#Question 1

car_matrix = df.pivot(index='id_1', columns='id_2', values='car')
car_matrix = car_matrix.fillna(0).astype(int)
car_matrix.values[[range(car_matrix.shape[0])]*1]
car_matrix

# Question 2

df['car_type'] = pd.cut(df['car'], bins=[-float('inf'), 15, 25, float('inf')],
                            labels=['low', 'medium', 'high'], right=False)
type_counts = df['car_type'].value_counts().to_dict()
sorted_type_counts = dict(sorted(type_counts.items()))

sorted_type_counts

# Question 3

import pandas as pd

def get_bus_indexes_from_csv(file_path):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(file_path)

    # Calculate the mean value of the 'bus' column
    bus_mean = df['bus'].mean()

    # Identify indices where 'bus' values are greater than twice the mean
    bus_indexes = df[df['bus'] > 2 * bus_mean].index.tolist()

    # Sort the indices in ascending order
    sorted_bus_indexes = sorted(bus_indexes)

    return sorted_bus_indexes

# Example usage:
file_path = 'dataset-1.csv'
result_bus_indexes = get_bus_indexes_from_csv(file_path)
print(result_bus_indexes)

# Question 4

import pandas as pd

def filter_routes(file_path):
    # Read the CSV file into a DataFrame
    df = pd.read_csv(file_path)

    # Calculate the average value of the 'truck' column for each 'route'
    route_avg_truck = df.groupby('route')['truck'].mean()

    # Filter routes where the average of 'truck' values is greater than 7
    selected_routes = route_avg_truck[route_avg_truck > 7].index.tolist()

    # Sort the list of selected routes
    sorted_routes = sorted(selected_routes)

    return sorted_routes

route_avg_truck = df.groupby('route')['truck'].mean()
selected_routes = route_avg_truck[route_avg_truck > 7].index.tolist()
sorted_routes = sorted(selected_routes)
sorted_routes

#question 5

import pandas as pd

def multiply_matrix(input_matrix):
    # Use applymap to apply the logic element-wise
    modified_matrix = input_matrix.applymap(lambda x: x * 0.75 if x > 20 else x * 1.25)

    # Round the values to 1 decimal place
    modified_matrix = modified_matrix.round(1)

    return modified_matrix

# Question 6

import pandas as pd

path="/content/dataset-2.csv"
df=pd.read_csv(path)
df

import pandas as pd
from datetime import datetime, timedelta

def verify_timestamp_completeness(df):

    # Combine startDay and startTime columns to create start_datetime
    df['start_datetime'] = pd.to_datetime(df['startDay'] + ' ' + df['startTime'])

    # Combine endDay and endTime columns to create end_datetime
    df['end_datetime'] = pd.to_datetime(df['endDay'] + ' ' + df['endTime'])

    # Create a timedelta of 24 hours
    one_day_timedelta = timedelta(days=1)

    # Check if the timestamp covers a full 24-hour period and spans all 7 days of the week
    completeness_check = (
        (df['end_datetime'] - df['start_datetime'] == one_day_timedelta) &
        (df['start_datetime'].dt.time == datetime.strptime('00:00:00', '%H:%M:%S').time()) &
        (df['end_datetime'].dt.time == datetime.strptime('23:59:59', '%H:%M:%S').time())
    )

    # Create a multi-index series with (id, id_2) as index
    completeness_series = completeness_check.groupby(['id', 'id_2']).all()

    return completeness_series



